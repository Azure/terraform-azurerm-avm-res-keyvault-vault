name: Auto Tag on Merge to Main

on:
  push:
    branches:
      - main  # Replace with your target branch name

jobs:
  create_tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          # Enable strict error handling
          set -e
          set -o pipefail

          # Get the latest tag; if none exists, default to empty string
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")

          # If no tags exist, start from v1.0.0
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.0.0"
          fi

          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        shell: bash

      - name: Calculate next tag version
        id: calc_next_tag
        run: |
          set -e
          set -o pipefail

          # Extract version components (format: <major>.<minor>.<patch>) from LATEST_TAG
          LATEST_TAG="${LATEST_TAG#v}"  # Remove the 'v' prefix
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"

          # If this is the initial tag, ensure we start with v1.0.0
          if [ "$LATEST_TAG" == "1.0.0" ]; then
            MINOR=0  # Set initial minor version to 0
          fi

          # Increment the minor version
          MINOR=$((MINOR + 1))

          # Reset the patch version to 0
          PATCH=0

          # Create the new tag
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        shell: bash

      - name: Create and push new tag
        run: |
          set -e
          set -o pipefail

          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}
        shell: bash
